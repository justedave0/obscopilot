[metadata]
name = obscopilot
description = Twitch live assistant with OBS integration and workflow automation
long_description = file: README.md
long_description_content_type = text/markdown
author = OBSCopilot Team
author_email = info@obscopilot.live
license = MIT
license_file = LICENSE
platforms = any
classifiers =
    Development Status :: 4 - Beta
    Intended Audience :: Developers
    Intended Audience :: End Users/Desktop
    License :: OSI Approved :: MIT License
    Operating System :: OS Independent
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3.9
    Programming Language :: Python :: 3.10
    Programming Language :: Python :: 3.11
    Topic :: Multimedia :: Video
    Topic :: Communications :: Chat
project_urls =
    Documentation = http://obscopilot.live/
    Source = https://github.com/justedave0/obscopilot
    Bug Reports = https://github.com/justedave0/obscopilot/issues

[options]
python_requires = >=3.9
packages = find:
package_dir =
    = .
include_package_data = True
zip_safe = False

[options.packages.find]
exclude =
    tests
    tests.*

[options.entry_points]
console_scripts =
    obscopilot = obscopilot.main:main

[flake8]
max-line-length = 100
exclude = .git,__pycache__,build,dist
select = E,W,F

[mypy]
python_version = 3.9
warn_return_any = True
warn_unused_configs = True
disallow_untyped_defs = False
disallow_incomplete_defs = False

[mypy.plugins.numpy.*]
follow_imports = skip

[tool:pytest]
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*
addopts = 
    --verbose
    --cov=obscopilot
    --cov-report=term-missing
qt_api = pyqt6
qt_default_raising = true
qt_log_level_fail = CRITICAL
markers =
    integration: marks tests as integration tests (deselect with '-m "not integration"')
    slow: marks tests as slow (deselect with '-m "not slow"')
    e2e: marks tests as end-to-end tests (deselect with '-m "not e2e"')

[coverage:run]
source = obscopilot
omit = 
    tests/*
    setup.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise NotImplementedError
    if __name__ == .__main__.:
    pass
    raise ImportError
    except ImportError:

[isort]
profile = black
line_length = 100 